export declare const User: import("../src/model").Model<new (...args: any) => any> & {
    profile: import("../src/model").Scope<Pick<import("../src/model").Model<new (...args: any) => any> & {
        active(this: import("../src/model").Model<new (...args: any) => any>): import("../src/model").ModelQuery<import("../src/model").Model<new (...args: any) => any>>;
    }, "take" | "model" | "config" | "db" | "table" | "quotedTable" | "primaryKey" | "quotedPrimaryKey" | "__query" | "create" | "updateAll" | "update" | "deleteAll" | "delete" | "setDefaultScope" | "unscoped" | "belongsTo" | "hasOne" | "hasMany" | "hasAndBelongsToMany" | "relations" | "scopes" | "prepare" | "all" | "_all" | "_take" | "rows" | "_rows" | "value" | "_value" | "exec" | "_exec" | "toSql" | "toQuery" | "clone" | "merge" | "_merge" | "distinct" | "_distinct" | "distinctRaw" | "_distinctRaw" | "select" | "_select" | "selectRaw" | "_selectRaw" | "from" | "_from" | "as" | "_as" | "wrap" | "_wrap" | "json" | "_json" | "join" | "_join" | "where" | "_where" | "and" | "_and" | "or" | "_or" | "find" | "_find" | "findBy" | "_findBy" | "order" | "_order" | "orderRaw" | "_orderRaw" | "group" | "_group" | "groupRaw" | "_groupRaw" | "having" | "_having" | "window" | "_window" | "union" | "_union" | "unionAll" | "_unionAll" | "intersect" | "_intersect" | "intersectAll" | "_intersectAll" | "except" | "_except" | "exceptAll" | "_exceptAll" | "limit" | "_limit" | "offset" | "_offset" | "for" | "_for" | "exists" | "_exists" | "active"> & {
        then: import("../src/model").Then<new (...args: any) => any>;
    }, {
        id: number;
    }>;
    profileWithScope: import("../src/model").Scope<Pick<import("../src/model").ModelQuery<import("../src/model").Model<new (...args: any) => any>>, "take" | "model" | "config" | "db" | "table" | "quotedTable" | "primaryKey" | "quotedPrimaryKey" | "__query" | "create" | "updateAll" | "update" | "deleteAll" | "delete" | "setDefaultScope" | "unscoped" | "belongsTo" | "hasOne" | "hasMany" | "hasAndBelongsToMany" | "relations" | "scopes" | "prepare" | "all" | "_all" | "_take" | "rows" | "_rows" | "value" | "_value" | "exec" | "_exec" | "toSql" | "toQuery" | "clone" | "merge" | "_merge" | "distinct" | "_distinct" | "distinctRaw" | "_distinctRaw" | "select" | "_select" | "selectRaw" | "_selectRaw" | "from" | "_from" | "as" | "_as" | "wrap" | "_wrap" | "json" | "_json" | "join" | "_join" | "where" | "_where" | "and" | "_and" | "or" | "_or" | "find" | "_find" | "findBy" | "_findBy" | "order" | "_order" | "orderRaw" | "_orderRaw" | "group" | "_group" | "groupRaw" | "_groupRaw" | "having" | "_having" | "window" | "_window" | "union" | "_union" | "unionAll" | "_unionAll" | "intersect" | "_intersect" | "intersectAll" | "_intersectAll" | "except" | "_except" | "exceptAll" | "_exceptAll" | "limit" | "_limit" | "offset" | "_offset" | "for" | "_for" | "exists" | "_exists"> & {
        then: import("../src/model").Then<new (...args: any) => any>;
    }, {
        id: number;
    }>;
};
